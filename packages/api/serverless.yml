service: warm-and-fuzzy-api

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager
  - serverless-pseudo-parameters

custom:
  # Distinguish WarmAndFuzzy resource names from other resources in same AWS account
  prefix: "WarmAndFuzzy"
  # Our stage is based on what is passed in when running serverless commands.
  # Fall back to 'dev' (as set in the provider section below) if not specified.
  stage: ${opt:stage, self:provider.stage}
  # API domain management (run `serverless create_domain` once per stage to create domain in Route53)
  customDomain:
    stage: ${self:custom.stage}
    domainName: ${self:custom.stage}.api.warmandfuzzy.house
    createRoute53Record: true
  # DynamoDB
  dynamoDbTablePrefix: ${self:custom.stage}.
  # Dev environment
  serverless-offline:
    port: 3001
  # Secrets management
  secretNameParticleAPIKey: "particleAPIKey"

provider:
  name: aws
  runtime: nodejs10.x
  region: us-west-2
  stage: dev
  apiKeys:
    - Webhooks.Particle.${self:custom.stage}
  environment:
    DYNAMODB_REGION: "${self:provider.region}"
    DYNAMODB_TABLE_NAME_PREFIX: "${self:custom.dynamoDbTablePrefix}"
  iamRoleStatements:
    # Give selective access to the given tables
    - Effect: Allow
      Action:
        # Basics
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        # Batch operations
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        # Streams
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource:
        - !GetAtt DeviceTenancyTable.Arn
        - !GetAtt LatestSensorValuesTable.Arn
        - !GetAtt LatestThermostatValuesTable.Arn
        - !GetAtt SensorConfigurationTable.Arn
        - !GetAtt ThermostatConfigurationTable.Arn
        - !GetAtt ValueStreamsTable.Arn
    # Give selective access to the given encrypted SSM keys
    - Effect: Allow
      Action: ssm:GetParameter
      Resource:
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.secretNameParticleAPIKey}"
    - Effect: Allow
      Action: kms:Decrypt
      Resource: "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:alias/aws/ssm"

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-device-tenancy.yml)}
  - ${file(resources/dynamodb-latest-sensor-values.yml)}
  - ${file(resources/dynamodb-latest-thermostat-values.yml)}
  - ${file(resources/dynamodb-sensor-configuration.yml)}
  - ${file(resources/dynamodb-thermostat-configuration.yml)}
  - ${file(resources/dynamodb-value-streams.yml)}

functions:
  # Authorizers
  auth0Authorizer:
    # Gives access to ARNs {stage}/*/api/* and {stage}/*/graphql
    handler: src/auth/handler.authorize
    cors: true
  # Config API
  api_config_get:
    handler: src/rest/v1/config/index.get
    events:
      - http:
          method: get
          path: api/v1/config
          cors: true
          authorizer: auth0Authorizer
  api_config_put:
    handler: src/rest/v1/config/index.put
    events:
      - http:
          method: put
          path: api/v1/config
          cors: true
          authorizer: auth0Authorizer
  # GraphQL
  graphql:
    handler: src/graphql/index.graphqlHandler
    events:
      - http:
          path: graphql
          method: get
          cors: true
          authorizer: auth0Authorizer
      - http:
          path: graphql
          method: post
          cors: true
          authorizer: auth0Authorizer
  # DynamoDB Stream handlers
  stream_thermostatConfiguration:
    handler: src/streams/thermostatConfiguration/index.dynamoStream
    environment:
      PARTICLE_API_KEY_NAME: ${self:custom.secretNameParticleAPIKey}
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ThermostatConfigurationTable.StreamArn
          batchSize: 1
          startingPosition: LATEST
  # Webhooks
  particleStatus:
    handler: src/webhooks/particle/status/index.post
    events:
      - http:
          method: post
          path: webhooks/particle/status
          cors: true
          private: true
