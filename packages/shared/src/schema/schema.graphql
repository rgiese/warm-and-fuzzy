#
# Directives
#

directive @requiresPermission(permission: RequiredPermission) on FIELD_DEFINITION

enum RequiredPermission {
  READ_DATA
  READ_CONFIG
  WRITE_CONFIG
  READ_SETTINGS
  WRITE_SETTINGS
  CROSS_TENANT_ADMIN
}

#
# Base types
#

scalar DateTime

#
# Root
#

schema {
  query: Query
  mutation: Mutation
}

type Query {
  # ThermostatSettings
  getThermostatSettings: [ThermostatSettings!]! @requiresPermission(permission: READ_SETTINGS)

  getThermostatSetting(id: ID!): ThermostatSettings! @requiresPermission(permission: READ_SETTINGS)

  # ThermostatConfiguration
  getThermostatConfigurations: [ThermostatConfiguration!]!
    @requiresPermission(permission: READ_CONFIG)

  getThermostatConfiguration(id: ID!): ThermostatConfiguration!
    @requiresPermission(permission: READ_CONFIG)

  # SensorConfiguration
  getSensorConfigurations: [SensorConfiguration!]! @requiresPermission(permission: READ_CONFIG)

  getSensorConfiguration(id: ID!): SensorConfiguration! @requiresPermission(permission: READ_CONFIG)

  # LatestThermostatValues
  getLatestThermostatValues: [ThermostatValue!]! @requiresPermission(permission: READ_DATA)

  getLatestThermostatValue(id: ID!): ThermostatValue! @requiresPermission(permission: READ_DATA)

  # LatestSensorValues
  getLatestSensorValues: [SensorValue!]! @requiresPermission(permission: READ_DATA)

  getLatestSensorValue(id: ID!): SensorValue! @requiresPermission(permission: READ_DATA)

  # Value streams
  getThermostatValueStreams(
    streamName: String!
    fromDate: DateTime
    toDate: DateTime
  ): [ThermostatValueStream!]! @requiresPermission(permission: READ_DATA)

  getSensorValueStreams(
    streamName: String!
    fromDate: DateTime
    toDate: DateTime
  ): [SensorValueStream!]! @requiresPermission(permission: READ_DATA)
}

type Mutation {
  # ThermostatSettings
  createThermostatSettings(thermostatSettings: ThermostatSettingsCreateInput!): ThermostatSettings!
    @requiresPermission(permission: WRITE_SETTINGS)

  updateThermostatSettings(thermostatSettings: ThermostatSettingsUpdateInput!): ThermostatSettings!
    @requiresPermission(permission: WRITE_SETTINGS)

  # ThermostatConfiguration
  createThermostatConfiguration(
    thermostatConfiguration: ThermostatConfigurationCreateInput!
  ): ThermostatConfiguration! @requiresPermission(permission: WRITE_CONFIG)

  updateThermostatConfiguration(
    thermostatConfiguration: ThermostatConfigurationUpdateInput!
  ): ThermostatConfiguration! @requiresPermission(permission: WRITE_CONFIG)

  # SensorConfiguration
  createSensorConfiguration(
    sensorConfiguration: SensorConfigurationCreateInput!
  ): SensorConfiguration! @requiresPermission(permission: WRITE_CONFIG)

  updateSensorConfiguration(
    sensorConfiguration: SensorConfigurationUpdateInput!
  ): SensorConfiguration! @requiresPermission(permission: WRITE_CONFIG)
}

#
# ThermostatSettings
#

enum ThermostatAction {
  Heat
  Cool
  Circulate
}

enum ThermostatSettingType {
  Hold
  Scheduled
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

type ThermostatSetting {
  type: ThermostatSettingType!

  # For Hold settings
  holdUntil: DateTime

  # For Scheduled settings
  daysOfWeek: [DayOfWeek!]
  atMinutesSinceMidnight: Int

  # For all types
  allowedActions: [ThermostatAction!]!
  setPointHeat: Float!
  setPointCool: Float!
}

input ThermostatSettingCreateInput {
  type: ThermostatSettingType!

  # For Hold settings
  holdUntil: DateTime

  # For Scheduled settings
  daysOfWeek: [DayOfWeek!]
  atMinutesSinceMidnight: Int

  # For all types
  allowedActions: [ThermostatAction!]!
  setPointHeat: Float!
  setPointCool: Float!
}

input ThermostatSettingUpdateInput {
  type: ThermostatSettingType!

  # For Hold settings
  holdUntil: DateTime

  # For Scheduled settings
  daysOfWeek: [DayOfWeek!]
  atMinutesSinceMidnight: Int

  # For all types
  allowedActions: [ThermostatAction!]!
  setPointHeat: Float!
  setPointCool: Float!
}

type ThermostatSettings {
  tenant: String!
  id: ID!
  settings: [ThermostatSetting!]!
}

input ThermostatSettingsCreateInput {
  id: ID!
  settings: [ThermostatSettingCreateInput!]!
}

input ThermostatSettingsUpdateInput {
  id: ID!
  settings: [ThermostatSettingUpdateInput!]!
}

#
# ThermostatConfiguration
#

input ThermostatConfigurationCreateInput {
  id: ID!
  name: String!
  streamName: String!

  availableActions: [ThermostatAction!]!

  allowedActions: [ThermostatAction!]!
  setPointHeat: Float!
  setPointCool: Float!

  externalSensorId: String
  threshold: Float!
  cadence: Int!
}

input ThermostatConfigurationUpdateInput {
  id: ID!
  name: String
  streamName: String

  availableActions: [ThermostatAction!]!

  allowedActions: [ThermostatAction!]
  setPointHeat: Float
  setPointCool: Float

  externalSensorId: String
  threshold: Float
  cadence: Int
}

type ThermostatConfiguration {
  tenant: String!
  id: ID!
  name: String!
  streamName: String!

  availableActions: [ThermostatAction!]!

  allowedActions: [ThermostatAction!]!
  setPointHeat: Float!
  setPointCool: Float!

  externalSensorId: String
  threshold: Float!
  cadence: Int!
}

#
# SensorConfiguration
#

input SensorConfigurationCreateInput {
  id: ID!
  name: String!
  streamName: String!
}

input SensorConfigurationUpdateInput {
  id: ID!
  name: String
  streamName: String
}

type SensorConfiguration {
  tenant: String!
  id: ID!
  name: String!
  streamName: String!
}

#
# [Thermostat,Sensor]Values
#

type ThermostatValue {
  id: ID!
  tenant: String!

  publishedTime: DateTime!
  deviceTime: DateTime!
  deviceLocalSerial: Int!

  temperature: Float!
  humidity: Float!
  currentActions: [ThermostatAction!]!

  setPointHeat: Float!
  setPointCool: Float!
  threshold: Float!
  allowedActions: [ThermostatAction!]!
}

type SensorValue {
  id: ID!
  tenant: String!

  publishedTime: DateTime!
  deviceTime: DateTime!
  deviceLocalSerial: Int!

  temperature: Float!
}

#
# Value streams
#

type ThermostatValueStream {
  streamName: String!

  publishedTime: DateTime!
  deviceTime: DateTime!
  deviceLocalSerial: Int!

  temperature: Float!
  humidity: Float!
  currentActions: [ThermostatAction!]!

  setPointHeat: Float!
  setPointCool: Float!
  threshold: Float!
  allowedActions: [ThermostatAction!]!
}

type SensorValueStream {
  streamName: String!

  publishedTime: DateTime!
  deviceTime: DateTime!
  deviceLocalSerial: Int!

  temperature: Float!
}
