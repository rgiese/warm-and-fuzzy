# c.f. https://circleci.com/docs/2.0/language-javascript/
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13

executors:
  node-executor:
    docker:
      # c.f. https://github.com/CircleCI-Public/circleci-dockerfiles/tree/master/node/images
      - image: circleci/node:12.6.0-stretch
    working_directory: ~/warm-and-fuzzy

  android-executor:
    docker:
      - image: circleci/android:api-28-node
    working_directory: ~/warm-and-fuzzy

jobs:
  #
  # API jobs
  #

  build:
    executor: node-executor
    steps:
      # Check out source
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # Install dependencies
      - run: npm install
      - run: npm run bootstrap

      # Save cache
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # Run builds
      - run: npm run build

      # Persist workspace for deployment
      - persist_to_workspace:
          root: .
          paths:
            - packages

  api-deploy:
    executor: node-executor
    steps:
      # Check out source
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # Attach to `build` workspace (provides built packages/)
      - attach_workspace:
          at: .

      # Install dependencies
      - run: npm install
      - run: npm run bootstrap

      # (Don't save cache again, we'll just let `build` deal with it)

      # Configure AWS toolchain
      - aws-cli/install
      - aws-cli/configure

      # Deploy
      - run:
          name: Deploy
          command: |
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              npm run deploy:prod
            else
              npm run deploy:dev
            fi

  #
  # Mobile jobs
  #

  mobile-build:
    executor: android-executor
    steps:
      # Check out source
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-mobile-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-mobile-dependencies-

      # Install dependencies
      - run: npm install
      - run: npm run bootstrap

      # Save cache
      - save_cache:
          paths:
            - node_modules
          key: v1-mobile-dependencies-{{ checksum "package.json" }}

      # Run builds
      - run: npm run decrypt-secrets
      - run: npm run build:shared
      - run: npm run bundle:mobile

  #
  # Firmware jobs
  #

  firmware-build:
    executor: node-executor
    steps:
      # Check out source
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-firmware-dependencies

      # Install dependencies
      - run:
          name: Install firmware dependencies
          command: npm install
          working_directory: ./firmware

      # Save cache
      - save_cache:
          paths:
            - firmware/node_modules
          key: v1-firmware-dependencies

      # Run build
      - run:
          name: Build firmware
          command: npm run build
          working_directory: ./firmware

      # Persist workspace for deployment
      - persist_to_workspace:
          root: .
          paths:
            - firmware/thermostat/build

  firmware-upload:
    executor: node-executor
    steps:
      # Check out source
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-firmware-dependencies

      # Install dependencies
      - run:
          name: Install firmware dependencies
          command: npm install
          working_directory: ./firmware

      # (Don't save cache again, we'll just let `firmware-build` deal with it)

      # Attach to `build` workspace (provides built firmware)
      - attach_workspace:
          at: .

      # Upload firmware to Particle cloud
      - run:
          name: Upload firmware to Particle
          command: npm run upload
          working_directory: ./firmware

#
# Workflows
#

workflows:
  version: 2

  api:
    jobs:
      - build
      - hold-to-deploy-api:
          type: approval
          requires:
            - build
      - api-deploy:
          context: warm-and-fuzzy-aws
          requires:
            - hold-to-deploy-api

  mobile:
    jobs:
      - mobile-build:
        context: warm-and-fuzzy-git-secrets

  firmware:
    jobs:
      - firmware-build:
          context: warm-and-fuzzy-particle
      - hold-to-upload:
          type: approval
          requires:
            - firmware-build
          filters:
            branches:
              only: master
      - firmware-upload:
          context: warm-and-fuzzy-particle
          requires:
            - hold-to-upload
          filters:
            branches:
              only: master
